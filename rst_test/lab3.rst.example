Черепашка
#########

:date: 2015-09-11 11:00
:test_link: http://kpm8.mipt.ru:8202/cgi-bin/new-client?contest_id=540103
:test_comment: Контрольная №3
:lecture_link: https://www.youtube.com/watch?v=M4FVjsNxNMY
:show_solutions: yes

.. :lecture_link: http://youtu.be/WfyrxZ4JMT4
.. :lecture_comment: Ведётся расшифровка

.. default-role:: code
.. contents:: Содержание

Ветвление
=========

Ветвление (или условная инструкция) в Python имеет следующий синтаксис:

.. code-block:: python

   if Условие:
       Блок_инструкций_1
   else:
       Блок_инструкций_2

`Блок_инструкций_1` будет выполнен, если `Условие` истинно.  Если `Условие` ложно, будет выполнен `Блок инструкций 2`.

В условной инструкции может отсутствовать слово `else` и последующий блок. Такая инструкция называется неполным
ветвлением.  Например, если дано число `x` и мы хотим заменить его на абсолютную величину `x`, то это можно сделать
следующим образом:

.. code-block:: python

   if x < 0:
       x = -x
   print(x)

В этом примере переменной `x` будет присвоено значение `-x`, но только в том случае, когда `x<0`. А вот инструкция
`print(x)` будет выполнена всегда, независимо от проверяемого условия.

Для выделения блока инструкций, относящихся к инструкции `if` или `else` в  языке Python используются отступы. Все
инструкции, которые относятся к одному блоку, должны иметь равную величину отступа, то есть одинаковое число пробелов в
начале строки. Рекомендуется использовать отступ в 4 пробела и не рекомедуется использовать в качестве отступа символ
табуляции.

Это одно из существенных отличий синтаксиса Pythonа от синтаксиса большинства языков, в которых блоки выделяются
специальными словами, например, `нц... кц` в Кумире, `begin... end` в Паскале или фигурными скобками в Си.

Вложенные условные инструкции
=============================

Внутри условных инструкций можно использовать любые инструкции языка Python, в том числе и условную инструкцию. Получаем
вложенное ветвление – после одной развилки в ходе исполнения программы появляется другая развилка.  При этом вложенные
блоки имеют больший размер отступа (например, 8 пробелов). Покажем это на примере программы, которая по данным ненулевым
числам x и y определяет, в какой из четвертей координатной плоскости находится точка (x,y):

.. code-block:: python

   x = int(input())
   y = int(input())
   if x > 0:
       if y > 0:               # x>0, y>0
           print("Первая четверть")
       else:                   # x>0, y<0
           print("Четвертая четверть")
   else:
       if y > 0:               # x<0, y>0
           print("Вторая четверть")
       else:                   # x<0, y<0
           print("Третья четверть")

В этом примере мы использовали *комментарии* – текст, который интерпретатор игнорирует.  Комментариями в Pythonе
является символ `#` и весь текст после этого символа до конца строки.


Операторы сравнения
===================

Как правило, в качестве проверяемого условия используется результат вычисления одного из следующих операторов сравнения:

+----------+---------------------------------------------------------------------------------+
| Оператор | Значение                                                                        |
+==========+=================================================================================+
| `<`      | Меньше — условие верно, если первый операнд меньше второго.                     |
+----------+---------------------------------------------------------------------------------+
| `>`      | Больше — условие верно, если первый операнд больше второго.                     |
+----------+---------------------------------------------------------------------------------+
| `<=`     | Меньше или равно — условие верно, если первый операнд меньше или равен второму. |
+----------+---------------------------------------------------------------------------------+
| `>=`     | Больше или равно — условие верно, если первый операнд больше или равен второму. |
+----------+---------------------------------------------------------------------------------+
| `==`     | Равенство. Условие верно, если два операнда равны.                              |
+----------+---------------------------------------------------------------------------------+

Например, условие `(x * x < 1000)` означает «значение `x * x` меньше 1000», а условие `(2 * x != y)` означает «удвоенное
значение переменной `x` не равно значению переменной `y`».


Операторы сравнения в Pythonе можно объединять в цепочки (в отличии от большинства других языков программирования, где
для этого нужно использовать логические связки), например, `a == b == c` или `1 <= x <= 10`.

Тип данных bool
===============

Операторы сравнения возвращают значения специального логического типа `bool`. Значения логического типа могут принимать
одно из двух значений: `True` (истина) или `False` (ложь). Если преобразовать логическое `True` к типу `int`, то
получится 1, а преобразование `False` даст 0. При обратном преобразовании число 0 преобразуется в `False`, а любое
ненулевое число в `True`. При преобразовании `str` в `bool` пустая строка преобразовывается в `False`, а любая непустая
строка в `True`.

Каскадные условные инструкции
=============================


Пример программы, определяющий четверть координатной плоскости, можно переписать используя «каскадную«
последовательность операцией `if... elif... else`:

.. code-block:: python

   x = int(input())
   y = int(input())
   if x > 0 and y > 0:
       print("Первая четверть")
   elif x > 0 and y < 0:
       print("Четвертая четверть")
   elif y > 0:
       print("Вторая четверть")
   else:
       print("Третья четверть")

В такой конструкции условия `if`, ..., `elif` проверяются по очереди, выполняется блок, соответствующий первому из
истинных условий. Если все проверяемые условия ложны, то выполняется блок `else`, если он присутствует.

Цикл while
==========


Цикл `while` («пока») позволяет выполнить одну и ту же последовательность действий, пока проверяемое условие истинно.
Условие записывается до тела цикла и проверяется до выполнения тела цикла. Как правило, цикл `while` используется, когда
невозможно определить точное значение количества проходов исполнения цикла.

Синтаксис цикла `while` в простейшем случае выглядит так:

.. code-block:: python

   while Условие:
       Блок_инструкций

При выполнении цикла `while` сначала проверяется условие. Если оно ложно, то  выполнение цикла прекращается и управление
передается на следующую инструкцию после тела цикла `while`. Если условие истинно, то выполняется инструкция, после чего
условие проверяется снова и снова выполняется инструкция. Так продолжается до тех пор, пока условие будет истинно. Как
только условие станет ложно, работа цикла завершится и управление передастся следующей инструкции после цикла.

Например, следующий фрагмент программы напечатает на экран всех целые числа, не превосходящие n:

.. code-block:: python

   a = 1
   while a <= n:
       print(a)
       a += 1

Общая схема цикла `while` в данном случае для перебора всех всех подходящих значений такая:

.. code-block:: python

   a = начальное_значение
   while а_является_подходящим_числом:
       обработать_a
       перейти_к_следующему_a

Небольшой модицификацией цикла добъемся того, чтобы выводились все степени двойки, не превосходящие числа n:

.. code-block:: python

   a = 1
   while a <= n:
       print(a)
       a *= 2

Вот еще один пример использования цикла `while` для определения количества цифр натурального числа `n`:

.. code-block:: python

   n = int(input())
   length = 0
   while n > 0:
       length += 1
       n //= 10

В этом цикле мы отбрасываем по одной цифре числа, начиная с конца, что эквивалентно целочисленному делению на 10 (`n //=
10`), при этом считаем в переменной `length`, сколько раз это было сделано.

В языке Python есть и другой способ решения этой задачи — `length = len(str(i))`.

Цикл for
========

Помимо рассмотренного ранее цикла `while` в языке Python существует ещё одна конструкция, позволяющая выполнять циклы —
конструкция `for X in Y`. Обычно эта конструкция используется для обработки списков, которые будут рассмотрены на
последующих занятиях. Сейчас же достаточно будет сказать, что цикл `for` может быть использован как более краткая
альтернатива циклу `while`.

Для последовательного перебора целых чисел из диапазона `[0; n)` можно использовать цикл `for`:

.. code-block:: python

   for i in range(10):
      print(i)

Этот код по выполняемым действиям полностью соответствуют циклу `while`:

.. code-block:: python

   i = 0
   while i < 10:
     print(i)
     i += 1

Можно задавать начальные и конечные значения для переменной цикла, а также шаг:

.. code-block:: python

   for i in range(20, 10, -2):
     print(i)

Аналогичный цикл `while`

.. code-block:: python

   i = 20
   while i > 10:
     print(i)
     i -= 2

Упражнение №1
-------------

Для каждого положительного числа, меньшего `n`, напечатайте `odd`, если число является нечётным, и `even`, если оно
является чётным. Пример:

+------+--------+
| Ввод | Вывод  |
+======+========+
| 7    | 1 odd  |
+------+--------+
|      | 2 even |
+------+--------+
|      | 3 odd  |
+------+--------+
|      | 4 even |
+------+--------+
|      | 5 odd  |
+------+--------+
|      | 6 even |
+------+--------+

.. code-block:: python

   n = int(input())

   for i in range(1, n):
       if i % 2 == 0:
           s = 'even'
       else:
           s = 'odd'
       print(i, s, sep=' ')

Использование функций и модулей
===============================

Зачастую при написании программ приходится иметь дело с многократным выполнением однотипных операций. Для того, чтобы
избежать дублирования кода (см. DRY_), вводится понятие **функции** — готового для переиспользования блока кода. С
некоторыми функциями мы уже знакомы, например, с `print` и `input`. При этом многие функции являются весьма полезными при
использовании не только внутри одной программы, но и могут существенно облегчить разработку целого ряда других программ.
Поэтому возникает следующий закономерный вопрос — как структурировать функции, используемые в одной программе, так, чтобы
их потом можно было использовать в другой? Для решения этого вопроса Python, как и многие другие современные языки,
предлагает простое решение — **модули**. Модуль — это набор функций и переменных (на самом деле всё несколько сложнее,
но на данном этапе подобные тонкости нас не интересуют).

.. _DRY: https://wikipedia.org/ru/Don%E2%80%99t_repeat_yourself

Подключение модуля осуществляется при помощи зарезервированного слова `import`, после чего можно использовать функции,
объявленные внутри подключенного модуля:

.. code-block:: pycon

   >>> import math
   >>> math.pi
   3.141592653589793
   >>> math.sin(math.pi/2)
   1.0
   >>> math.cos(0)
   1.0

В данном примере используется модуль `math` стандартной библиотеки языка Python для вычисления синуса и косинуса.
Обратите внимание, что при использовании функций, объявленных в модуле, требуется вызывать функцию, указывая название
модуля, т.е. `название_модуля.название_функции`.

Отличительной особенностью языка Python является очень богатая стандартная библиотека. Поэтому зачастую можно услышать,
что Python поставляется вместе с батарейками («batteries included»). Полный список «батареек» можно посмотреть в
официальной документации_.

.. _документации: https://docs.python.org/3/py-modindex.html

Черепаха
--------

Стандартная библиотека Python содержит модуль `turtle`, предназначенный для обучения программированию. Этот модуль
содержит набор_ функций, позволяющих управлять черепахой. Черепаха умеет выполнять небольшой набор команд, а именно:

.. _набор: https://docs.python.org/3/library/turtle.html#methods-of-rawturtle-turtle-and-corresponding-functions

+-------------+-----------------------------------+
| Команда     | Значение                          |
+=============+===================================+
| forward(X)  | Пройти вперёд X пикселей          |
+-------------+-----------------------------------+
| backward(X) | Пройти назад X пикселей           |
+-------------+-----------------------------------+
| left(X)     | Повернуться налево на X градусов  |
+-------------+-----------------------------------+
| right(X)    | Повернуться направо на X градусов |
+-------------+-----------------------------------+
| penup()     | Не оставлять след при движении    |
+-------------+-----------------------------------+
| pendown()   | Оставлять след при движении       |
+-------------+-----------------------------------+
| shape(X)    | Изменить значок черепахи          |
+-------------+-----------------------------------+

Например, следующая программа рисует букву `S`:

.. code-block:: python

   import turtle

   turtle.shape('turtle')
   turtle.forward(50)
   turtle.left(90)
   turtle.forward(50)
   turtle.left(90)
   turtle.forward(50)
   turtle.right(90)
   turtle.forward(50)
   turtle.right(90)
   turtle.forward(50)

.. image:: {filename}/images/lab3/example.gif

Упражнение №2: квадрат
----------------------

Нарисуйте квадрат. Пример:

.. image:: {filename}/images/lab3/rectangle.gif


.. code-block:: python

   import turtle

   for i in range(4):
       turtle.forward(100)
       turtle.left(90)

Упражнение №3: окружность
-------------------------

Нарисуйте окружность. Воспользуйтесь тем фактом, что правильный многоугольник с большим числом сторон  будет выглядеть
как окружность. Пример:

.. image:: {filename}/images/lab3/circle.gif

.. code-block:: python

   import turtle
   import math

   r = 100
   n = 50
   a = 2*r*math.sin(math.pi/n)
   b = 180*(1-2/n)

   turtle.penup()
   turtle.forward(r)
   turtle.left(180-b/2)
   turtle.pendown()

   for i in range(n):
       turtle.forward(a)
       turtle.left(180-b)

Упражнение №4: больше квадратов
-------------------------------

Нарисуйте 10 вложенных квадратов.

.. image:: {filename}/images/lab3/nested_rectangles.gif

.. code-block:: python

   import turtle

   l = 20
   for i in range(10):
       turtle.penup()
       turtle.goto(-l/2, -l/2)
       turtle.pendown()
       for k in range(4):
           turtle.forward(l)
           turtle.left(90)
       l += 20

Упражнение №5: спираль
----------------------

Нарисуйте спираль. Пример:

.. image:: {filename}/images/lab3/spiral.gif

.. code-block:: python

   import turtle
   import math

   r = 5
   n = 50

   turtle.penup()
   turtle.forward(r)
   turtle.left(90)
   turtle.pendown()

   for i in range(10):
       x = 5/n
       for j in range(n):
           a = 2*r*math.sin(math.pi/n)
           b = 180*(1-2/n)
           turtle.forward(a)
           turtle.left(180-b)
           r += x

Упражнение №6: квадратная «спираль»
-----------------------------------

Нарисуйте «квадратную» спираль. Пример:

.. image:: {filename}/images/lab3/rect_spiral.gif

.. code-block:: python

   import turtle

   a = 10
   for i in range(40):
       turtle.forward(a)
       turtle.left(90)
       a += 5

Написание функций
=================

Как было сказано раньше, функции — это своего рода готовые кирпичики, из которых строится программа. До этого момента мы
*использовали* стандартные функции (`print`, `input`, функции модуля `turtle`), теперь настало время *написать* функцию:

.. code-block:: pycon

   >>> def hello(name):
   ...     print('Hello, ', name, '!')
   ...
   >>> hello('world')
   Hello,  world!

Это простейший пример функции, которая принимает в качестве **параметра** имя, а затем выводит на экран сообщение
`Hello, <имя>`. Как видно из примера, функции в языке Python описываются при помощи ключевого слова `def`:

.. code-block:: python

   def Имя_функции(параметр_1, параметр_2, ...):
       Блок_операций

Так же, как и в случае циклов и условных операторов, **тело** функции выделяется при помощи отступов.

Вызов функции осуществляется по имени с указанием параметров:

.. code-block:: python

    hello('world')

Внутри функции можно использовать те же синтаксические конструкции, что и вне её — циклы, ветвления, можно даже
описывать новые функции. Естественно, внутри функции можно работать и с переменными.

Написанная ранее функция имеет особенность — она просто просто выводит текст на экран и не возвращает никакого
результата. Многие функции, напротив, занимаются вычислением какого-либо значения, а затем **возвращают** его тому, кто
эту функцию **вызвал**. В качестве примера можно рассмотреть функцию для сложения двух чисел:

.. code-block:: pycon

   >>> def sum(a, b):
   ...     return a + b
   ...
   >>> sum(1, 2)
   3
   >>> sum(5, -7)
   -2

Для возврата значения из функции используется оператор `return`: в качестве параметра указывается значение, которое
требуется вернуть.


Упражнение №7: правильные многоугольники
----------------------------------------

Нарисуйте 10 вложенных правильных многоугольников. Используйте функцию, рисующую правильный n-угольник. Пример:

.. image:: {filename}/images/lab3/regular_polygon.gif

.. code-block:: python

   import turtle
   import math

   def poly(r, n):
       a = 2*r*math.sin(math.pi/n)
       b = 180*(1-2/n)
       turtle.left(180-b/2)

       for j in range(n):
           turtle.forward(a)
           turtle.left(180-b)

   r = 30
   n = 3

   turtle.penup()
   turtle.forward(r)
   turtle.pendown()

   for i in range(10):
       poly(r, n)
       b = 180*(1-2/n)

       turtle.right(180-b/2)
       turtle.penup()
       turtle.forward(20)
       turtle.down()

       n += 1
       r += 20

Упражнение №8: «цветок»
-----------------------

Нарисуйте «цветок» из окружностей. Используйте функцию, рисующую окружность. Пример:

.. image:: {filename}/images/lab3/flower.gif

.. code-block:: python

   import turtle
   import math

   r = 50
   n = 50
   m = 3
   a = 2*r*math.sin(math.pi/n)
   b = 180*(1-2/n)

   def circle(sgn):
       for i in range(n):
           turtle.forward(a)
           turtle.left(sgn*(180-b))

   turtle.speed('fastest')

   for i in range(m):
       circle(1)
       circle(-1)
       turtle.left(180/m)


Упражнение №9: «бабочка»
------------------------

Нарисуйте «бабочку» из окружностей. Используйте функцию, рисующую окружность. Пример:

.. image:: {filename}/images/lab3/butterfly.gif

.. code-block:: python

   import turtle
   import math

   def circle(r, n, sgn):
       a = 2*r*math.sin(math.pi/n)
       b = 180*(1-2/n)
       for i in range(n):
           turtle.forward(a)
           turtle.left(sgn*(180-b))

   r = 50
   n = 50
   m = 10

   turtle.speed('fastest')

   turtle.left(90)

   for i in range(m):
       circle(r, n, 1)
       circle(r, n, -1)
       r += 10

Упражнение №10: пружина
-----------------------

Нарисуйте пружину. Используйте функцию, рисующую дугу. Пример:

.. image:: {filename}/images/lab3/spring.gif

.. code-block:: python

   import turtle
   import math

   def arc(r, n):
       a = 2*r*math.sin(math.pi/n/2)

       turtle.right(90/n)
       for i in range(n):
           turtle.forward(a)
           turtle.right(180/n)

       turtle.left(90/n)

   R = 50
   r = 10
   N = 20
   n = 10
   m = 5

   l = m*2*R+(m-1)*2*r

   turtle.penup()
   turtle.goto(-l/2, -(R+r)/2)
   turtle.pendown()

   turtle.left(90)

   for i in range(m-1):
       arc(R, N)
       arc(r, n)

   arc(R, N)


Упражнение №11: звезды
----------------------

Нарисуйте две звезды: одну с 5 вершинами, другую — с 11. Используйте функцию, рисующую звезду с n вершинами. Пример:

.. image:: {filename}/images/lab3/star5.gif
.. image:: {filename}/images/lab3/star11.gif

.. code-block:: python

   import turtle
   import math

   def star(r, n):
       a = 2*r*math.sin(math.pi/n)
       l = a/(2*(1-math.cos(math.pi/n)))**0.5

       turtle.penup()
       turtle.left(90-360/n)
       turtle.forward(r)
       turtle.left(180-90/n)
       turtle.pendown()

       for i in range(n):
           turtle.forward(l)
           turtle.left(180-180/n)

   star(100, 11)

Рекурсия
========

Как мы видели раньше функции могут вызывать другие функции — это вполне обыденная ситуация. При этом функция может
вызывать саму себя. Такой тип вызова называется **рекурсивным**. Самый простой пример рекурсивного вызова функции —
вычисление факториала числа:

.. code-block:: pycon

   >>> def fac(n):
   ...        if n == 0:
   ...            return 1
   ...        else:
   ...            return n*fac(n-1)
   ...
   >>> fac(5)
   120

Конечно, эту программу можно переписать и без рекурсивных вызовов:

.. code-block:: pycon

   >>> def fac(n):
   ...     f = 1
   ...     x = 2
   ...     while x <= n:
   ...         f *= x
   ...         x += 1
   ...
   ...     return f
   ...
   >>> fac(5)
   120

Отличие этих двух программ кроется в подходе к их построению. Первая написана в **декларативном** стиле, то есть для
вычисления факториала используются его *свойства*, а именно `n! = n*(n-1)!` и `0!=1`. Второй же подход использует
**императивный** стиль: мы *явно описываем*, что *представляет из себя* факториал: `n! = 1*2*…*n`. В большинстве случаев
один и тот же алгорит может быть легко записан, как в рекурсивной форме, так и в нерекурсивной, но существует ряд задач,
для которых построение нерекурсивного алгоритма представляется весьма трудозатратным.

Количество вложенных рекурсивных вызовов называется **глубиной** рекурсии. В силу ограниченности вычислительных ресурсов
рекурсия в компьютерных программах не бывает бесконечной — программист должен явно следить за тем, чтоб глубина
рекурсивных вызовов не превышала заранее известного числа. Если программист об этом не позаботился (или же сделал это
некорректно), операционная система (или интерпретатор) аварийно завершит программу по исчерпанию доступых ресурсов.
Чтобы убедиться в этом, попробуйте вычислить `(-5)!` при помощи рассмотренного ранее примера рекурсивного алгоритма
вычисления факториала.

Упражнение №12: числа Фибоначчи\*
---------------------------------

Напишите программу, вычисляющую n-ное число Фибоначчи. Используйте рекурсивные вызовы функций. Пример

+------+-------+
| Ввод | Вывод |
+======+=======+
| 7    | 13    |
+------+-------+

.. code-block:: python

   def fib(n):
       if n < 2:
           return n
       else:
           return fib(n-2)+fib(n-1)

   print(fib(7))


Фракталы
--------

Хорошим примером для иллюстрации рекурсивных алгоритмов являются задачи рисования фракталов_. Фрактальные кривые,
обладающие бесконечным самоподобием, не являются спрямляемыми_: хоть их и можно изобразить на плоскости конечной
площади, эти кривые имют бесконечную длину. Соответственно, программно их невозможно нарисовать полностью: всегда будет
возможность нарисовать кривую детальнее. Поэтому, фрактальные кривые рисуют в некотором приближении, заранее фиксируя
максимально допустимую глубину рекурсии.

.. _фракталов: https://wikipedia.org/ru/%D0%A4%D1%80%D0%B0%D0%BA%D1%82%D0%B0%D0%BB
.. _спрямляемыми: https://wikipedia.org/ru/%D0%94%D0%BB%D0%B8%D0%BD%D0%B0_%D0%BA%D1%80%D0%B8%D0%B2%D0%BE%D0%B9


Пример программы, использующей рекурсивные вызовы функции, чтобы нарисовать ветку:

.. code-block:: python

   def draw(l, n):
       if n == 0:
           turtle.left(180)
           return

       x = l/(n+1)
       for i in range(n):
           turtle.forward(x)
           turtle.left(45)
           draw(0.5*x*(n-i-1), n-i-1)
           turtle.left(90)
           draw(0.5*x*(n-i-1), n-i-1)
           turtle.right(135)

       turtle.forward(x)
       turtle.left(180)
       turtle.forward(l)

   draw(400, 5)

Результат выполнения программы при разной глубине рекурсии:

.. image:: {filename}/images/lab3/leaf2.gif
   :width: 250 px
.. image:: {filename}/images/lab3/leaf3.gif
   :width: 250 px
.. image:: {filename}/images/lab3/leaf5.gif
   :width: 250 px

Упражнение №13: кривая Коха\*
-----------------------------

Нарисуйте `кривую Коха`_. Пример работы алгоритма при разной глубине рекурсии:

.. _`кривую Коха`: https://wikipedia.org/ru/%D0%9A%D1%80%D0%B8%D0%B2%D0%B0%D1%8F_%D0%9A%D0%BE%D1%85%D0%B0

.. image:: {filename}/images/lab3/koch_curve1.gif
   :width: 350 px
.. image:: {filename}/images/lab3/koch_curve2.gif
   :width: 350 px
.. image:: {filename}/images/lab3/koch_curve3.gif
   :width: 350 px
.. image:: {filename}/images/lab3/koch_curve4.gif
   :width: 350 px

.. code-block:: python

   import turtle

   def curve(l, n):
       if n == 0:
           turtle.forward(l)
       else:
           curve(l/3, n-1)
           turtle.left(60)
           curve(l/3, n-1)
           turtle.right(120)
           curve(l/3, n-1)
           turtle.left(60)
           curve(l/3, n-1)

   L = 800
   H = L/6*3**0.5
   N = 4

   turtle.penup()
   turtle.goto(-L/2, -H/2)
   turtle.pendown()

   curve(L, N)

Упражнение №14: снежинка Коха\*
-------------------------------

Нарисуйте `снежинку Коха`_. Пример работы алгоритма при разной глубине рекурсии:

.. _`снежинку Коха`: https://wikipedia.org/ru/%D0%9A%D1%80%D0%B8%D0%B2%D0%B0%D1%8F_%D0%9A%D0%BE%D1%85%D0%B0

.. image:: {filename}/images/lab3/koch_snowflake1.gif
   :width: 350 px
.. image:: {filename}/images/lab3/koch_snowflake2.gif
   :width: 350 px
.. image:: {filename}/images/lab3/koch_snowflake3.gif
   :width: 350 px
.. image:: {filename}/images/lab3/koch_snowflake4.gif
   :width: 350 px

.. code-block:: python

   import turtle

   def curve(l, n):
       if n == 0:
           turtle.forward(l)
       else:
           curve(l/3, n-1)
           turtle.left(60)
           curve(l/3, n-1)
           turtle.right(120)
           curve(l/3, n-1)
           turtle.left(60)
           curve(l/3, n-1)

   def snowflake(L, N):
       for i in range(3):
           curve(L, N)
           turtle.right(120)

   L = 300
   H = L/6*3**0.5
   N = 4

   turtle.penup()
   turtle.goto(-L/2, H)
   turtle.pendown()

   turtle.speed('fastest')
   snowflake(L, N)

Упражнение №15 кривая Минковского\*
-----------------------------------

Нарисуйте `кривую Минковского`_. Пример работы алгоритма при разной глубине рекурсии:

.. _`кривую Минковского`: http://wikipedia.org/ru/%D0%9A%D1%80%D0%B8%D0%B2%D0%B0%D1%8F_%D0%9C%D0%B8%D0%BD%D0%BA%D0%BE%D0%B2%D1%81%D0%BA%D0%BE%D0%B3%D0%BE

.. image:: {filename}/images/lab3/minkowski_curve1.gif
   :width: 250 px
.. image:: {filename}/images/lab3/minkowski_curve2.gif
   :width: 250 px
.. image:: {filename}/images/lab3/minkowski_curve3.gif
   :width: 250 px

.. code-block:: python

   import turtle

   def curve(l, n):
       if n == 0:
           turtle.forward(l)
           return
       curve(l/4, n-1)
       turtle.left(90)
       curve(l/4, n-1)
       turtle.right(90)
       curve(l/4, n-1)
       turtle.right(90)
       curve(l/4, n-1)
       curve(l/4, n-1)
       turtle.left(90)
       curve(l/4, n-1)
       turtle.left(90)
       curve(l/4, n-1)
       turtle.right(90)
       curve(l/4, n-1)

   L = 800
   N = 3

   turtle.speed('fastest')

   turtle.penup()
   turtle.goto(-L/2, 0)
   turtle.pendown()

   curve(L, N)


Упражнение №16: кривая Леви\*
-----------------------------

Нарисуйте `кривую Леви`_. Пример работы алгоритма при разной глубине рекурсии:

.. _`кривую Леви`: https://wikipedia.org/ru/%D0%9A%D1%80%D0%B8%D0%B2%D0%B0%D1%8F_%D0%9B%D0%B5%D0%B2%D0%B8

.. image:: {filename}/images/lab3/levi_curve1.gif
   :width: 350 px
.. image:: {filename}/images/lab3/levi_curve2.gif
   :width: 350 px
.. image:: {filename}/images/lab3/levi_curve3.gif
   :width: 350 px
.. image:: {filename}/images/lab3/levi_curve9.gif
   :width: 350 px

.. code-block:: python

   import turtle

   def curve(l, n):
       if n == 0:
           turtle.forward(l)
           return
       turtle.left(45)
       curve(l/2**0.5, n-1)
       turtle.right(90)
       curve(l/2**0.5, n-1)
       turtle.left(45)

   L = 400
   N = 9

   turtle.speed('fastest')

   turtle.penup()
   turtle.goto(-L/2, -L/3)
   turtle.pendown()

   curve(L, N)
